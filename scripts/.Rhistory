} else {
samples_to_remove <- c()
}
samples_to_remove
}
remove_tips <- function(tree, tips_to_remove) {
new_tree <- tree
removed_nodes <- tips_to_remove
if (length(tips_to_remove)>0) {
for (tipNr in tips_to_remove) {
parentNr=get_parentNr(new_tree, tipNr)
children=get_childrenNr(new_tree, parentNr)
if (children[1]==tipNr) {
otherChNr=children[2]
} else {
otherChNr=children[1]
}
parent_otherCh_edge_length <- new_tree$edge.length[which(new_tree$edge[,2]==otherChNr)]
#remove [parentNr, tipNr] edge and length
new_tree$edge.length <- new_tree$edge.length[-which(new_tree$edge[,2]==tipNr)]
new_tree$edge <- new_tree$edge[-which(new_tree$edge[,2]==tipNr),]
removed_nodes <- c(removed_nodes, parentNr)
#remove [parentNr, otherChNr] edge and length
new_tree$edge.length <- new_tree$edge.length[-which(new_tree$edge[,2]==otherChNr)]
new_tree$edge <- new_tree$edge[-which(new_tree$edge[,2]==otherChNr),]
grandparentNr=get_parentNr(new_tree,parentNr)
if (length(grandparentNr) > 0) {
grandparent_parent_edge_length <- new_tree$edge.length[which(new_tree$edge[,2]==parentNr)]
#replace [grantparentNr, parentNr] edge with [grandparent, otherChNr] edge and
# assign new length
new_tree$edge[which(new_tree$edge[,2]==parentNr),] = c(grandparentNr, otherChNr)
new_tree$edge.length[which(new_tree$edge[,2]==otherChNr)] =
parent_otherCh_edge_length +  grandparent_parent_edge_length
} else {
new_tree$root.edge = new_tree$root.edge +
parent_otherCh_edge_length
}
}
old_nodeNrs <- sort(setdiff(1:(2*tree$Nnode+1), removed_nodes))
mapping <- setNames(1:length(old_nodeNrs), old_nodeNrs)
new_tree$edge[,1] <- as.integer(mapping[as.character(new_tree$edge[,1])])
new_tree$edge[,2] <- as.integer(mapping[as.character(new_tree$edge[,2])])
new_tree$tip.label <- tree$tip.label[-tips_to_remove]
new_tree$Nnode <- length(new_tree$tip.label)-1
}
new_tree
}
get_descendant_edges_ind <- function(tree, nodeNr) {
children = get_childrenNr(tree, nodeNr)
if (length(children) >0 ) {
descendant_edges_ind <- c(which(tree$edge[,2] == children[1]),
which(tree$edge[,2] == children[2]),
get_descendant_edges_ind(tree, children[1]),
get_descendant_edges_ind(tree, children[2]))
} else {
descendant_edges_ind <- c()
}
descendant_edges_ind
}
remove_all_r_lineages <- function(tree, r) {
nodes_to_remove = c()
new_tipNrs= c()
for(tipNr in 1:(tree$Nnode+1)) {
if (tree$edge.length[which(tree$edge[,2] == tipNr)] == 0  &  runif(1) < r ) {
new_tipNrs <- c(new_tipNrs, tipNr)
nodes_to_remove <- c(nodes_to_remove, get_parentNr(tree, tipNr))
}
}
if (length(nodes_to_remove) < 1 ) {
return(tree)
}
edges_to_remove_ind <- c()
for (nodeNr in nodes_to_remove) {
edges_to_remove_ind <- c(edges_to_remove_ind,
get_descendant_edges_ind(tree, nodeNr))
}
duplicated_edge_ind <- unique(edges_to_remove_ind[duplicated(edges_to_remove_ind)])
if (length(duplicated_edge_ind) > 0) {
duplicated_tipNr <- intersect(new_tipNrs, unique(tree$edge[duplicated_edge_ind, 2]))
exclude_tipNrs_ind <- match(duplicated_tipNr, new_tipNrs)
new_tipNrs <- new_tipNrs[-exclude_tipNrs_ind]
nodes_to_remove <- nodes_to_remove[-exclude_tipNrs_ind]
}
new_tree <- tree
keep_edges_indices <- setdiff(1:nrow(tree$edge), unique(edges_to_remove_ind))
new_tree$edge <- new_tree$edge[keep_edges_indices,]
new_tree$edge.length <- new_tree$edge.length[keep_edges_indices]
old_tipNrs <- sort(intersect(1:(tree$Nnode+1), c(unique(new_tree$edge[,2]), new_tipNrs)))
new_tree$tip.label <- new_tree$tip.label[old_tipNrs]
new_tree$Nnode <- length(new_tree$tip.label)-1
old_tipNrs[match(new_tipNrs, old_tipNrs)] = nodes_to_remove
old_nodeNrs <- c(old_tipNrs, sort(setdiff(unique(c(new_tree$edge[,1], new_tree$edge[,2])),
old_tipNrs)))
mapping <- setNames(1:length(old_nodeNrs), old_nodeNrs)
new_tree$edge[,1] <- as.integer(mapping[as.character(new_tree$edge[,1])])
new_tree$edge[,2] <- as.integer(mapping[as.character(new_tree$edge[,2])])
new_tree
}
## copied from FossilSim repo, Util.R and modified:
n.ages <- function(tree){
depth = ape::node.depth.edgelength(tree)
node.ages = max(depth) - depth
names(node.ages) <- 1:(tree$Nnode+length(tree$tip))
# adding possible offset if tree fully extinct
if (!is.null(tree$root.time)) {
if (tree$root.time > max(node.ages) + tree$root.edge) {
node.ages = node.ages + tree$root.time - max(node.ages) - tree$root.edge
}
}
return(node.ages)
}
find_birthNr_of_node_species <- function(tree, nodeNr) {
repeat {
parentNr = get_parentNr(tree, nodeNr)
children = get_childrenNr(tree, parentNr)
if (length(parentNr) == 0) {
parentNr=0
break
}
if (children[2]==nodeNr) {
break  # Exits the loop when the condition is TRUE
}
nodeNr=parentNr
}
parentNr
}
convert_to_IITree <- function(tree, r, i, seed=NULL) {
tree$root.time = max(ape::node.depth.edgelength(tree))+tree$root.edge
samples_to_remove <- collect_consequitve_sas(tree, tree$Nnode+2, FALSE)
if (length(samples_to_remove) > 0 ) {
tree <- remove_tips(tree, samples_to_remove)
}
if (!is.null(seed)) {
set.seed(seed)
}
#remove all lineages after r events
tree <- remove_all_r_lineages(tree, r)
if (nrow(tree$edge) == 0) {
print("All the edges were removed due to removal after sampling, no tree is returned")
return(NULL)
}
node.ages <- n.ages(tree)
#match each first sample (extinct sample with label tNum_1) with its birth time.
#Label each sample with tNum
II_df <- data.frame(Label = character(),
TransmissionTime = numeric(),
SamplingTime = numeric(),
stringsAsFactors = FALSE)
sa_labels <- c()
for(tipNr in 1:(tree$Nnode+1)) {
if (tree$edge.length[which(tree$edge[,2] == tipNr)] == 0 )   {
label <- str_split_i(tree$tip.label[tipNr], "_", 1)
birthNr <- find_birthNr_of_node_species(tree, get_parentNr(tree,tipNr))
if (birthNr > 0 ) {
transmission_time <- node.ages[birthNr]
} else {
transmission_time <- tree$root.time
}
new_row <- data.frame(Label = label,
TransmissionTime = transmission_time ,
SamplingTime = node.ages[tipNr],
stringsAsFactors = FALSE)
sa_labels <- c(sa_labels, tree$tip.label[tipNr])
II_df <- rbind(II_df, new_row)
}
}
if (length(sa_labels)==0 ) {
print("There is at most one sample, no tree is returned")
return(NULL)
}
# trim all unsampled lineages (samples are only SA's)
browser()
tips_to_remove <- which(!tree$tip.label %in% sa_labels)
new_tree <- tree
while (length(tips_to_remove)>0) {
old_tree <- new_tree
new_tree <- remove_tips(old_tree, tips_to_remove)
tips_to_remove <- which(!new_tree$tip.label %in% sa_labels)
}
tree <- new_tree
if (nrow(tree$edge) == 0) {
print("All the edges were removed due to removal after sampling, no tree is returned")
return(NULL)
}
#rename leaves:
tree$tip.label <- gsub("_1", "", tree$tip.label)
list(tree, II_df, length(samples_to_remove))
}
args <- commandArgs(trailingOnly = TRUE)
# Check if any arguments were provided
if (length(args) < 6) {
cat("Please supply six arguments: lambda, mu, psi, r, number of extant tips, number of trees.\n")
} else {
# Example: Access the first and second arguments
lambda <- args[1]
mu <- args[2]
psi <- args[3]
r <- args[4]
n <- args[5]
num_sim <- args[6]
}
lambda = 5
mu = 1
psi = 1
r = 0.9
n=100
num_sim=10
trees <- sim.fbd.taxa(n=as.numeric(n), numbsim = as.numeric(num_sim), lambda = as.numeric(lambda), mu = as.numeric(mu), psi = as.numeric(psi),
complete = TRUE)
tree = trees[[1]]
rangeplot.asymmetric(tree, complete=TRUE)
out <- convert_to_IITree(trees[[9]], 0.1)
#IItree <- out[[1]]
out <- convert_to_IITree(trees[[9]], 0.1)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
rangeplot.asymmetric(tree, complete=TRUE)
rangeplot.asymmetric(tree, complete=TRUE)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
View(tree)
View(tree)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
out <- convert_to_IITree(tree, r)
force(tips_to_remove)
runif(1)
library(FossilSim)
library(stringr)
library(ape)
get_parentNr <- function(tree, nodeNr) {
tree$edge[which(tree$edge[,2]== nodeNr), 1]
}
get_childrenNr <- function(tree, nodeNr) {
tree$edge[which(tree$edge[,1]== nodeNr), 2]
}
## copied from FossilSim repo, Util.R and modified:
n.ages <- function(tree){
depth = ape::node.depth.edgelength(tree)
node.ages = max(depth) - depth
names(node.ages) <- 1:(tree$Nnode+length(tree$tip))
# adding possible offset if tree fully extinct
if (!is.null(tree$root.time)) {
if (tree$root.time > max(node.ages) + tree$root.edge) {
node.ages = node.ages + tree$root.time - max(node.ages) - tree$root.edge
}
}
return(node.ages)
}
find_transmission_date_nodeNr <- function(tree, nodeNr, patient_id_first) {
for (childNr in get_childrenNr(tree, nodeNr)) {
if (childNr <= tree$Nnode + 1) {
if (tree$tip.label[childNr] == patient_id_first & tree$edge.length[which(tree$edge[,2]== childNr)] <= 1e-8) {
return(childNr)
}
}
}
return(find_transmission_date_nodeNr(tree, get_parentNr(tree, nodeNr), patient_id_first))
}
find_transmission_dates <- function(tree, patient_ids) {
node.ages <- n.ages(tree)
first_dates <- c()
for (patient_id in patient_ids) {
nodeNr <- which(tree$tip.label == paste(patient_id, "last", sep="_"))
first_nodeNr <- find_transmission_date_nodeNr(tree, get_parentNr(tree, nodeNr), paste(patient_id, "first", sep="_"))
if (is.na(first_nodeNr)) {
print()
}
first_dates <- c(first_dates, node.ages[first_nodeNr])
}
first_dates
}
analysis_dir <- "/Users/aga122/Git/EstimatingInfectionDate/simulations/0.2_0.001_0.05_0.9_100_trees/1"
prop <- "0.5"
index <- sub(".*/", "", analysis_dir)
trees_file <- paste(paste(analysis_dir, index, sep="/"), "_prop", prop, ".trees", sep="")
original_dates_file <- paste(analysis_dir, "/II", index, ".csv", sep = " ")
utd_patients_file <- paste(paste(analysis_dir, "unknownTDLabels_prop", sep= "/"), prop, ".txt", sep="")
trees <- read.nexus(trees_file)
utd_patients_ids <- scan(utd_patients_file, what=character())
utd_patients_ids <- sub("_first", "", utd_patients_ids)
estimated_dates_df <- data.frame(matrix(ncol = length(utd_patients_ids), nrow = 0))
colnames(estimated_dates_df) <- utd_patients_ids
tree_count <- length(trees)
for (i in (floor(tree_count * 0.1)+1):tree_count {
for (i in (floor(tree_count * 0.1)+1):tree_count) {
estimated_dates_df <- rbind(estimated_dates_df, find_transimission_dates(tree[[i]], utd_patients_ids))
print(paste("Tree number", as.character(i), "has been processed."))
}
for (i in (floor(tree_count * 0.1)+1):tree_count) {
estimated_dates_df <- rbind(estimated_dates_df, find_transmission_dates(tree[[i]], utd_patients_ids))
print(paste("Tree number", as.character(i), "has been processed."))
}
for (i in (floor(tree_count * 0.1)+1):tree_count) {
estimated_dates_df <- rbind(estimated_dates_df, find_transmission_dates(trees[[i]], utd_patients_ids))
print(paste("Tree number", as.character(i), "has been processed."))
}
head(estimated_dates_df)
estimated_dates_df <- data.frame(matrix(ncol = length(utd_patients_ids), nrow = 0))
colnames(estimated_dates_df) <- utd_patients_ids
tree_count <- length(trees)
for (i in (floor(tree_count * 0.1)+1):tree_count) {
new_row <- as.dataframe(find_transmission_dates(trees[[i]], utd_patients_ids))
colnames(new_row) <- utd_patients_ids
estimated_dates_df <- rbind(estimated_dates_df, )
print(paste("Tree number", as.character(i), "has been processed."))
}
for (i in (floor(tree_count * 0.1)+1):tree_count) {
new_row <- data.frame(t(find_transmission_dates(trees[[i]], utd_patients_ids)))
colnames(new_row) <- utd_patients_ids
estimated_dates_df <- rbind(estimated_dates_df, )
print(paste("Tree number", as.character(i), "has been processed."))
}
for (i in (floor(tree_count * 0.1)+1):tree_count) {
new_row <- data.frame(t(find_transmission_dates(trees[[i]], utd_patients_ids)))
colnames(new_row) <- utd_patients_ids
estimated_dates_df <- rbind(estimated_dates_df, new_row)
print(paste("Tree number", as.character(i), "has been processed."))
}
head(estimated_dates_df)
true_ages <- read.csv(original_dates_file)
original_dates_file <- paste(analysis_dir, "/II", index, ".csv", sep = "")
true_ages <- read.csv(original_dates_file)
head(true_ages)
true_ages$TransmissionTime[true_ages$Label %in% utd_patients_ids]
date_df <- read.csv(original_dates_file)
true_ages <- date_df[dates_df$Label %in% utd_patients_ids,]
dates_df <- read.csv(original_dates_file)
true_ages <- dates_df[dates_df$Label %in% utd_patients_ids,]
true_ages
row.names(true_ages) <- true_ages$Label
true_ages
true_t_dates <- true_ages$TransmissionTime
dates_df <- read.csv(original_dates_file)
dates_df<- dates_df[dates_df$Label %in% utd_patients_ids,]
row.names(dates_df) <- dates_df$Label
true_t_dates <- dates_df$TransmissionTime
true_t_dates
row.names(true_t_dates) <- dates_df$Label
dates_df <- read.csv(original_dates_file)
dates_df<- dates_df[dates_df$Label %in% utd_patients_ids,]
true_t_dates <- dates_df$TransmissionTime
row.names(true_t_dates) <- dates_df$Label
names(true_t_dates) <- dates_df$Label
true_t_dates
estimated_dates_df
true_t_dates
head(estimated_dates_df)
library(ggplot2)
library(dplyr)
library(tidyr)
get_HPD <- function(x) {
quantiles <- quantile(x, probs = c(0.025, 0.975))
return(quantiles)
}
summary_df <- estimated_dates_df %>%
summarise(across(everything(), list(mean = ~mean(.), HPD_lower = ~get_HPD(.)[1], HPD_upper = ~get_HPD(.)[2]))) %>%
pivot_longer(cols = everything(), names_to = c("Variable", ".value"), names_pattern = "(.*)_(.*)") %>%
arrange(Variable)
# Plot using ggplot2
ggplot(summary_df, aes(x = Variable, y = mean, ymin = HPD_lower, ymax = HPD_upper)) +
geom_pointrange() +  # Add points with error bars for HPD interval
theme_minimal() +
labs(title = "Mean and 95% HPD Interval for Each Column", y = "Value", x = "Variable")
# Calculate mean and HPD for each column using apply
means <- apply(estimated_dates_df, 2, mean)
HPD_lower <- apply(estimated_dates_df, 2, function(x) get_HPD(x)[1])
HPD_upper <- apply(estimated_dates_df, 2, function(x) get_HPD(x)[2])
# Create a new dataframe with the results
summary_estimated_dates_df <- data.frame(
Variable = names(estimated_dates_df),
Mean = means,
HPD_lower = HPD_lower,
HPD_upper = HPD_upper
)
# Plot using ggplot2
ggplot(summary_estimated_dates_df, aes(x = Variable, y = Mean, ymin = HPD_lower, ymax = HPD_upper)) +
geom_pointrange() +  # Add points with error bars for HPD interval
theme_minimal() +
labs(title = "Mean and 95% HPD Interval for Each Column", y = "Value", x = "Variable")
ggplot(summary_df, aes(x = Variable)) +
# Plot the means and HPD intervals
geom_pointrange(aes(y = Mean, ymin = HPD_lower, ymax = HPD_upper), color = "blue") +
# Add the true means as points
geom_point(aes(y = True_Mean), color = "red", size = 3) +
theme_minimal() +
labs(title = "Mean and 95% HPD Interval with True Means", y = "Value", x = "Variable") +
scale_color_manual(values = c("blue", "red"))
# Create a new dataframe with the results
summary_estimated_dates_df <- data.frame(
Variable = names(estimated_dates_df),
Mean = means,
HPD_lower = HPD_lower,
HPD_upper = HPD_upper,
True_Mean = dates_df[1,]
)
ggplot(summary_df, aes(x = Variable)) +
# Plot the means and HPD intervals
geom_pointrange(aes(y = Mean, ymin = HPD_lower, ymax = HPD_upper), color = "blue") +
# Add the true means as points
geom_point(aes(y = True_Mean), color = "red", size = 3) +
theme_minimal() +
labs(title = "Mean and 95% HPD Interval with True Means", y = "Value", x = "Variable") +
scale_color_manual(values = c("blue", "red"))
True_Mean = dates_df[1,]
True_Mean
# Create a new dataframe with the results
summary_estimated_dates_df <- data.frame(
Variable = names(estimated_dates_df),
Mean = means,
HPD_lower = HPD_lower,
HPD_upper = HPD_upper,
True_Mean = true_t_dates
)
ggplot(summary_df, aes(x = Variable)) +
# Plot the means and HPD intervals
geom_pointrange(aes(y = Mean, ymin = HPD_lower, ymax = HPD_upper), color = "blue") +
# Add the true means as points
geom_point(aes(y = True_Mean), color = "red", size = 3) +
theme_minimal() +
labs(title = "Mean and 95% HPD Interval with True Means", y = "Value", x = "Variable") +
scale_color_manual(values = c("blue", "red"))
summary_estimated_dates_df
ggplot(summary_df, aes(x = Variable)) +
# Plot the means and HPD intervals
geom_pointrange(aes(y = Mean, ymin = HPD_lower, ymax = HPD_upper), color = "blue") +
# Add the true means as points
geom_point(aes(y = True_Mean), color = "red", size = 3) +
theme_minimal() +
labs(title = "Mean and 95% HPD Interval with True Means", y = "Value", x = "Variable") +
scale_color_manual(values = c("blue", "red"))
ggplot(summary_estimated_dates_df, aes(x = Variable)) +
# Plot the means and HPD intervals
geom_pointrange(aes(y = Mean, ymin = HPD_lower, ymax = HPD_upper), color = "blue") +
# Add the true means as points
geom_point(aes(y = True_Mean), color = "red", size = 3) +
theme_minimal() +
labs(title = "Mean and 95% HPD Interval with True Means", y = "Value", x = "Variable") +
scale_color_manual(values = c("blue", "red"))
summary_estimated_dates_df$Variable <- factor(summary_estimated_dates_df$Variable,
levels = summary_estimated_dates_df$Variable[order(summary_estimated_dates_df$True_Mean)])
ggplot(summary_estimated_dates_df, aes(x = Variable)) +
# Plot the means and HPD intervals
geom_pointrange(aes(y = Mean, ymin = HPD_lower, ymax = HPD_upper), color = "blue") +
# Add the true means as points
geom_point(aes(y = True_Mean), color = "red", size = 3) +
theme_minimal() +
labs(title = "Mean and 95% HPD Interval with True Means", y = "Value", x = "Variable") +
scale_color_manual(values = c("blue", "red"))
age = 20
lambda =0.2
mu = 0.001
psi = 0.05
r=0.9
trees <- sim.fbd.age(age=as.numeric(age), numbsim = 1, lambda = as.numeric(lambda), mu = as.numeric(mu), psi = as.numeric(psi),
complete = TRUE)
library(FossilSim)
library(stringr)
library(ape)
trees <- sim.fbd.age(age=as.numeric(age), numbsim = 1, lambda = as.numeric(lambda), mu = as.numeric(mu), psi = as.numeric(psi),
complete = TRUE)
trees[[1]]
trees <- sim.fbd.age(age=as.numeric(age), numbsim = 100, lambda = as.numeric(lambda), mu = as.numeric(mu), psi = as.numeric(psi),
complete = TRUE)
trees[[2]]
trees[[1]]
trees[[3]]
trees[[4]]
trees[[5]]
trees[[6]]
trees[[7]]
trees[[8]]
trees[[9]]
trees[[10]]
trees[[11]]
trees[[12]]
trees[[13]]
trees[[14]]
trees[[15]]
trees[[16]]
trees[[17]]
trees[[18]]
is.null(trees[[18]])
str(trees[[18]])
str(trees[[17]])
class(trees[[17]])
class(trees[[18]])
is.empty(trees[[18]])
trees[[18]]==1
trees[[18]]==0
is.double(trees[[18]])
is.double(trees[[17]])
